import React, {useState} from 'react';
import {Redirect} from 'react-router-dom';
import PropTypes from 'prop-types';
import {Layout, Alert} from 'antd';

const {Content} = Layout;

function Login({location, logIn, errorMessage}) {

    const {from} = location.state || {from: {pathname: '/'}};

    const [redirectToPreviousRoute, setRedirectToPreviousRoute] = useState(false);
    const [email, setEmail] = useState('max@test.com');
    const [password, setPassword] = useState('12345');

    const handleSubmit = (event) => {
        event.preventDefault();

        logIn({email, password}, () => {
            setRedirectToPreviousRoute(true);
        });
    };

    if (redirectToPreviousRoute) {
        return <Redirect to={from}/>
    }

    return (
        <Content
            className="site-layout-background"
            style={{
                margin: '24px 16px',
                padding: 24,
                minHeight: 280,
            }}
        >
            {errorMessage && (
                <Alert
                    message="Error"
                    description={errorMessage}
                    type="error"
                    showIcon
                />
            )}
            <form onSubmit={handleSubmit}>
                <div>
                    <input
                        type="email"
                        placeholder="Электронный адрес"
                        value={email}
                        onChange={(event) => setEmail(event.target.value)}
                    />
                </div>
                <div>
                    <input
                        type="password"
                        placeholder="Пароль"
                        value={password}
                        onChange={(event) => setPassword(event.target.value)}
                    />
                </div>
                <button
                    type="submit"
                >
                    Log in
                </button>
            </form>
        </Content>
    );
}

Login.propTypes = {
    logIn: PropTypes.func.isRequired,
    errorMessage: PropTypes.string,
};

export default Login;